{
  "ver": "0.1",
  "info": {
    "id": "XsfGDn",
    "date": "1366756943",
    "viewed": 50225,
    "name": "Texture - Better Filtering",
    "username": "iq",
    "description": "This shader shows how to avoid the ugly artifacts of bilinear texture filtering. You can find more information here [url]https://iquilezles.org/articles/texture[/url]",
    "likes": 218,
    "published": 3,
    "flags": 0,
    "tags": [
      "2d",
      "texture",
      "filtering",
      "cubic",
      "bilinear"
    ],
    "hasliked": 0,
    "usePreview": 0
  },
  "renderpass": [
    {
      "inputs": [
        {
          "id": 16,
          "src": "/media/a/3083c722c0c738cad0f468383167a0d246f91af2bfa373e9c5c094fb8c8413e0.png",
          "ctype": "texture",
          "channel": 0,
          "sampler": {
            "filter": "mipmap",
            "wrap": "repeat",
            "vflip": "false",
            "srgb": "false",
            "internal": "byte"
          },
          "published": 1
        }
      ],
      "outputs": [
        {
          "id": 37,
          "channel": 0
        }
      ],
      "code": "void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 p = fragCoord/iResolution.x;\n    vec2 uv = p*0.1;\t\n\t\n    //---------------------------------------------\t\n\t// regular texture map filtering\n    //---------------------------------------------\t\n\tvec3 colA = texture( iChannel0, uv ).xyz;\n\n    //---------------------------------------------\t\n\t// my own filtering \n    //---------------------------------------------\t\n\tfloat textureResolution = iChannelResolution[0].x;\n\tuv = uv*textureResolution + 0.5;\n\tvec2 iuv = floor( uv );\n\tvec2 fuv = fract( uv );\n\tuv = iuv + fuv*fuv*(3.0-2.0*fuv); // fuv*fuv*fuv*(fuv*(fuv*6.0-15.0)+10.0);;\n\tuv = (uv - 0.5)/textureResolution;\n\tvec3 colB = texture( iChannel0, uv ).xyz;\n\t\n    //---------------------------------------------\t\n    // final color\n    //---------------------------------------------\t\n\tfloat f = sin(3.1415927*p.x + 0.7*iTime);\n\tvec3 col = (f>=0.0) ? colA : colB;\n\tcol *= smoothstep( 0.0, 0.01, abs(f-0.0) );\n\t\n    fragColor = vec4( col, 1.0 );\n}",
      "name": "Image",
      "description": "",
      "type": "image"
    }
  ]
}
